import os
import json
from io import BytesIO
import logging
import base64
import requests
import time
import asyncio
import tempfile
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, filters, CallbackQueryHandler
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
import PyPDF2
from docx import Document
import io
import magic  # –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è MIME-—Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
import filetype  # —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_BOT_TOKEN = "7639285272:AAH-vhuRyoVDMNjqyvkDgfsZw7_d5GEc77Q"
ADMIN_ID = 8199808170
ADMIN_USERNAME = "aunex"  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ANTHROPIC_API_KEY = "sk-Rr88gyoBb4RD9ipDp4vHqXa9W0CkA8piOCN8swUfvqsCiuOf2j5Eg-aNqRwgUKyHw6n2qvtlIb1uSV385QUfpA"
ANTHROPIC_API_URL = "https://api.langdock.com/anthropic/eu/v1/messages"
DEFAULT_CREDITS = 10
MAX_MEMORY_MESSAGES = 10
MAX_MESSAGE_LENGTH = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
CREDIT_RESET_HOURS = 10   # –ü–µ—Ä–∏–æ–¥ —Å–±—Ä–æ—Å–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–≤ —á–∞—Å–∞—Ö)
MAX_FILE_SIZE = 20 * 1024 * 1024  # 20 –ú–ë –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
SUPPORTED_FILE_TYPES = {
    'application/pdf': 'PDF',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'DOCX',
    'text/plain': 'TXT',
    'text/csv': 'CSV',
    'application/json': 'JSON',
    'text/markdown': 'Markdown',
    'text/html': 'HTML',
    'application/xml': 'XML',
    'application/rtf': 'RTF',
    'application/msword': 'DOC',
    'application/vnd.ms-excel': 'XLS',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'XLSX',
    'application/vnd.ms-powerpoint': 'PPT',
    'application/vnd.openxmlformats-officedocument.presentationml.presentation': 'PPTX',
    'image/jpeg': 'JPEG',
    'image/png': 'PNG',
    'image/gif': 'GIF',
    'image/webp': 'WEBP',
    'image/svg+xml': 'SVG'
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_data = {}
# –ü–∞–º—è—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_memory = {}
# –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤
credit_reset_tasks = {}
# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
processing_files = set()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
USER_KEYBOARD_COMMANDS = ["üí∞ –ë–∞–ª–∞–Ω—Å", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
ADMIN_KEYBOARD_COMMANDS = ["üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", "‚ûñ –°–Ω—è—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", 
                          "üåü –î–∞—Ç—å –±–µ–∑–ª–∏–º–∏—Ç", "‚≠ê –£–±—Ä–∞—Ç—å –±–µ–∑–ª–∏–º–∏—Ç", "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", 
                          "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_keyboard():
    keyboard = [USER_KEYBOARD_COMMANDS]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def get_admin_keyboard():
    keyboard = [ADMIN_KEYBOARD_COMMANDS[:4]]
    keyboard.append(ADMIN_KEYBOARD_COMMANDS[4:])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def load_users_data():
    global users_data
    try:
        if os.path.exists('users_data.json'):
            with open('users_data.json', 'r', encoding='utf-8') as file:
                users_data = json.load(file)
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å–±—Ä–æ—Å–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                for user_id in users_data:
                    if "next_reset_time" not in users_data[user_id]:
                        users_data[user_id]["next_reset_time"] = (datetime.now() + timedelta(hours=CREDIT_RESET_HOURS)).isoformat()
                    if "unlimited" not in users_data[user_id]:
                        users_data[user_id]["unlimited"] = False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        users_data = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_users_data():
    try:
        with open('users_data.json', 'w', encoding='utf-8') as file:
            json.dump(users_data, file, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def init_user(user_id):
    if str(user_id) not in users_data:
        users_data[str(user_id)] = {
            "credits": DEFAULT_CREDITS if user_id != ADMIN_ID else float('inf'),
            "unlimited": user_id == ADMIN_ID,
            "name": "",
            "username": "",
            "next_reset_time": (datetime.now() + timedelta(hours=CREDIT_RESET_HOURS)).isoformat()
        }
        save_users_data()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def init_user_memory(user_id):
    if user_id not in user_memory:
        user_memory[user_id] = []

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Anthropic
async def query_anthropic(messages):
    headers = {
        "Content-Type": "application/json",
        "x-api-key": ANTHROPIC_API_KEY
    }
    
    payload = {
        "model": "claude-3-7-sonnet-20250219",
        "messages": messages,
        "max_tokens": 4000
    }
    
    try:
        response = requests.post(ANTHROPIC_API_URL, json=payload, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Anthropic API: {e}")
        return {"error": str(e)}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
def split_text(text, max_length=MAX_MESSAGE_LENGTH):
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_part = ""
    sentences = text.split(". ")
    
    for sentence in sentences:
        if len(current_part) + len(sentence) + 2 <= max_length:
            if current_part:
                current_part += ". " + sentence
            else:
                current_part = sentence
        else:
            if current_part:
                parts.append(current_part + ".")
                current_part = sentence
            else:
                # –ï—Å–ª–∏ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –ø–æ —Å–ª–æ–≤–∞–º
                words = sentence.split(" ")
                current_part = ""
                for word in words:
                    if len(current_part) + len(word) + 1 <= max_length:
                        if current_part:
                            current_part += " " + word
                        else:
                            current_part = word
                    else:
                        parts.append(current_part)
                        current_part = word
                if current_part:
                    parts.append(current_part)
                current_part = ""
    
    if current_part:
        parts.append(current_part)
    
    return parts

# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Å—Ç—è–º–∏
async def send_long_message(update, text, reply_markup=None):
    parts = split_text(text)
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —á–∞—Å—Ç–µ–π –µ—Å–ª–∏ —á–∞—Å—Ç–µ–π –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
    if len(parts) > 1:
        for i, part in enumerate(parts):
            # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –ø–æ–ª—É—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if i == len(parts) - 1 and reply_markup:
                await update.message.reply_text(f"–ß–∞—Å—Ç—å {i+1}/{len(parts)}:\n\n{part}", reply_markup=reply_markup)
            else:
                await update.message.reply_text(f"–ß–∞—Å—Ç—å {i+1}/{len(parts)}:\n\n{part}")
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
            await asyncio.sleep(0.5)
    else:
        await update.message.reply_text(parts[0], reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
async def reset_credits(user_id, context):
    if str(user_id) in users_data and not users_data[str(user_id)].get("unlimited", False):
        users_data[str(user_id)]["credits"] = DEFAULT_CREDITS
        users_data[str(user_id)]["next_reset_time"] = (datetime.now() + timedelta(hours=CREDIT_RESET_HOURS)).isoformat()
        save_users_data()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"–í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç—ã –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {DEFAULT_CREDITS} –∫—Ä–µ–¥–∏—Ç–æ–≤."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–±—Ä–æ—Å–µ –∫—Ä–µ–¥–∏—Ç–æ–≤: {e}")

# –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Å–±—Ä–æ—Å–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
async def schedule_credit_reset(user_id, context):
    if str(user_id) in users_data:
        next_reset_time = datetime.fromisoformat(users_data[str(user_id)]["next_reset_time"])
        now = datetime.now()
        
        if now >= next_reset_time:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ–π—á–∞—Å
            await reset_credits(user_id, context)
        else:
            # –ò–Ω–∞—á–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–±—Ä–æ—Å –Ω–∞ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è
            delay = (next_reset_time - now).total_seconds()
            
            if user_id in credit_reset_tasks:
                credit_reset_tasks[user_id].cancel()
            
            credit_reset_tasks[user_id] = asyncio.create_task(
                delayed_credit_reset(user_id, delay, context)
            )

# –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π —Å–±—Ä–æ—Å –∫—Ä–µ–¥–∏—Ç–æ–≤
async def delayed_credit_reset(user_id, delay, context):
    await asyncio.sleep(delay)
    await reset_credits(user_id, context)
    # –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
    await schedule_credit_reset(user_id, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    username = update.effective_user.username
    
    init_user(user_id)
    init_user_memory(user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_data[str(user_id)]["name"] = user_name
    users_data[str(user_id)]["username"] = username or ""
    save_users_data()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±—Ä–æ—Å–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
    await schedule_credit_reset(user_id, context)
    
    welcome_message = (
        "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Claude 3.7 Sonnet!* üåü\n\n"
        "–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ Claude 3.7 Sonnet –æ—Ç Anthropic. "
        "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ñ–∞–π–ª—ã, –ø–æ–º–æ–≥–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n\n"
        "üì± *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ –ü–æ–º–æ—â—å –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Ñ–∞–π–ª–æ–≤\n"
        "‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏\n\n"
        "üìÑ *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*\n"
        "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã: PDF, DOCX, DOC, TXT –∏ –¥—Ä—É–≥–∏–µ\n"
        "‚Ä¢ –¢–∞–±–ª–∏—Ü—ã, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20 –ú–ë\n\n"
    )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö
    if users_data[str(user_id)].get("unlimited", False):
        welcome_message += "üí∞ *–£ –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø!*\n\n"
    else:
        welcome_message += f"üí∞ *–£ –≤–∞—Å {users_data[str(user_id)]['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤*\n"
        welcome_message += f"üíé –î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–ª–∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @{ADMIN_USERNAME}\n\n"
    
    welcome_message += (
        "üìã *–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*\n"
        "üí∞ –ë–∞–ª–∞–Ω—Å - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
        "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é - —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª! üöÄ"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if user_id == ADMIN_ID:
        await update.message.reply_text(welcome_message, parse_mode=ParseMode.MARKDOWN, reply_markup=get_admin_keyboard())
    else:
        await update.message.reply_text(welcome_message, parse_mode=ParseMode.MARKDOWN, reply_markup=get_user_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üí∞ –ë–∞–ª–∞–Ω—Å"
async def balance_command(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    init_user(int(user_id))
    
    if users_data[user_id].get("unlimited", False):
        balance_text = "–£ –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É! üåü"
    else:
        credits = users_data[user_id]["credits"]
        next_reset = datetime.fromisoformat(users_data[user_id]["next_reset_time"])
        
        balance_text = (
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤.\n"
            f"–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤: {next_reset.strftime('%d.%m.%Y %H:%M')}"
        )
    
    await update.message.reply_text(balance_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
async def reset_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    init_user_memory(user_id)
    user_memory[user_id] = []
    
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞! üßπ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
async def help_command(update: Update, context: CallbackContext):
    help_text = (
        "üîç *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:*\n\n"
        "üìù *–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ —Ç–µ–∫—Å—Ç—ã —Ä–∞–∑–±–∏—Ç—ã–º–∏ –Ω–∞ —É–¥–æ–±–Ω—ã–µ —á–∞—Å—Ç–∏\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∞–π–ª—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        "‚Ä¢ –ë–æ—Ç –ø–æ–º–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞\n\n"
        "üìë *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤:*\n"
        "‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: PDF, DOCX, DOC, TXT, RTF, JSON, CSV, XML, HTML\n"
        "‚Ä¢ üìä –¢–∞–±–ª–∏—Ü—ã: XLSX, XLS\n"
        "‚Ä¢ üìΩ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: PPTX, PPT\n"
        "‚Ä¢ üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: JPG, PNG, GIF, WebP, SVG\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20 –ú–ë\n"
        "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∞–π–ª—É –≤ –ø–æ–¥–ø–∏—Å–∏\n\n"
        "‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n"
        "‚Ä¢ –í–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã\n\n"
        "‚å®Ô∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:*\n"
        "üí∞ –ë–∞–ª–∞–Ω—Å - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
        "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
    )
    
    if users_data[str(update.effective_user.id)].get("unlimited", False):
        help_text += "üí∞ –£ –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!\n"
    else:
        help_text += (
            "üí° –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 1 –∫—Ä–µ–¥–∏—Ç\n"
            f"üí´ –î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–ª–∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @{ADMIN_USERNAME}\n"
            "üíé –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—á–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω–∞—è!\n"
        )
    
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

# –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
async def list_users_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not users_data:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    users_list = "üìä *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
    for uid, data in users_data.items():
        name = data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        username = data.get("username", "")
        credits = data.get("credits", 0)
        unlimited = data.get("unlimited", False)
        
        user_info = f"üë§ ID: `{uid}`\n"
        user_info += f"üìù –ò–º—è: {name}\n"
        if username:
            user_info += f"üîó Username: @{username}\n"
        
        if unlimited:
            user_info += f"üí∞ –°—Ç–∞—Ç—É—Å: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø\n\n"
        else:
            user_info += f"üí∞ –ö—Ä–µ–¥–∏—Ç—ã: {credits}\n"
            next_reset = datetime.fromisoformat(data.get("next_reset_time", datetime.now().isoformat()))
            user_info += f"‚è± –°–±—Ä–æ—Å: {next_reset.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        users_list += user_info
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω—ã–π
    parts = split_text(users_list)
    for part in parts:
        await update.message.reply_text(part, parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã"
async def add_credits_command(update: Update, context: CallbackContext, target_user_id=None, amount=None):
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if target_user_id is None or amount is None:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É
        context.user_data['last_admin_command'] = 'add_credits'
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`", parse_mode=ParseMode.MARKDOWN)
        return
    
    try:
        amount = int(amount)
        if amount <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except ValueError:
        await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return
    
    if str(target_user_id) not in users_data:
        init_user(int(target_user_id))
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑–ª–∏–º–∏—Ç, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    if users_data[str(target_user_id)].get("unlimited", False):
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∏–º–µ–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø, –∫—Ä–µ–¥–∏—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    
    users_data[str(target_user_id)]["credits"] += amount
    save_users_data()
    
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}.")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=int(target_user_id),
            text=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –≤–∞–º {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_data[str(target_user_id)]['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "‚ûñ –°–Ω—è—Ç—å –∫—Ä–µ–¥–∏—Ç—ã"
async def remove_credits_command(update: Update, context: CallbackContext, target_user_id=None, amount=None):
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if target_user_id is None or amount is None:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É
        context.user_data['last_admin_command'] = 'remove_credits'
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`", parse_mode=ParseMode.MARKDOWN)
        return
    
    try:
        amount = int(amount)
        if amount <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except ValueError:
        await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return
    
    if str(target_user_id) not in users_data:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑–ª–∏–º–∏—Ç, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    if users_data[str(target_user_id)].get("unlimited", False):
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∏–º–µ–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø, –∫—Ä–µ–¥–∏—Ç—ã –Ω–µ —Å–Ω—è—Ç—ã.")
        return
    
    prev_amount = users_data[str(target_user_id)]["credits"]
    users_data[str(target_user_id)]["credits"] = max(0, prev_amount - amount)
    save_users_data()
    
    actual_removed = prev_amount - users_data[str(target_user_id)]["credits"]
    
    await update.message.reply_text(f"–°–Ω—è—Ç–æ {actual_removed} –∫—Ä–µ–¥–∏—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}.")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=int(target_user_id),
            text=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–Ω—è–ª {actual_removed} –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_data[str(target_user_id)]['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω—è—Ç–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üåü –î–∞—Ç—å –±–µ–∑–ª–∏–º–∏—Ç"
async def set_unlimited_command(update: Update, context: CallbackContext, target_user_id=None):
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if target_user_id is None:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É
        context.user_data['last_admin_command'] = 'set_unlimited'
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`ID`", parse_mode=ParseMode.MARKDOWN)
        return
    
    if str(target_user_id) not in users_data:
        init_user(int(target_user_id))
    
    if users_data[str(target_user_id)].get("unlimited", False):
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–∂–µ –∏–º–µ–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø.")
        return
    
    users_data[str(target_user_id)]["unlimited"] = True
    save_users_data()
    
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø.")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=int(target_user_id),
            text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "‚≠ê –£–±—Ä–∞—Ç—å –±–µ–∑–ª–∏–º–∏—Ç"
async def unset_unlimited_command(update: Update, context: CallbackContext, target_user_id=None, new_amount=None):
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if target_user_id is None or new_amount is None:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É
        context.user_data['last_admin_command'] = 'unset_unlimited'
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`", parse_mode=ParseMode.MARKDOWN)
        return
    
    try:
        new_amount = int(new_amount)
        if new_amount < 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except ValueError:
        await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return
    
    if str(target_user_id) not in users_data:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    if not users_data[str(target_user_id)].get("unlimited", False):
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –∏–º–µ–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    users_data[str(target_user_id)]["unlimited"] = False
    users_data[str(target_user_id)]["credits"] = new_amount
    users_data[str(target_user_id)]["next_reset_time"] = (datetime.now() + timedelta(hours=CREDIT_RESET_HOURS)).isoformat()
    save_users_data()
    
    await update.message.reply_text(f"–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ—Ç–º–µ–Ω–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {new_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤.")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=int(target_user_id),
            text=f"–í–∞—à –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {new_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
def get_file_type(file_bytes):
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å –ø–æ–º–æ—â—å—é filetype (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Windows)
        kind = filetype.guess(file_bytes)
        if kind is not None:
            mime_type = kind.mime
            logger.info(f"–¢–∏–ø —Ñ–∞–π–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —á–µ—Ä–µ–∑ filetype: {mime_type}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ç–∏–ø–∞–º
            # PDF
            if mime_type == 'application/pdf' or 'pdf' in mime_type:
                return 'application/pdf'
            # MS Word (DOCX, DOC)
            elif 'officedocument.wordprocessingml.document' in mime_type or 'docx' in mime_type:
                return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
            elif 'application/msword' in mime_type or 'doc' in mime_type:
                return 'application/msword'
            # MS Excel (XLSX, XLS)
            elif 'officedocument.spreadsheetml.sheet' in mime_type or 'xlsx' in mime_type:
                return 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            elif 'application/vnd.ms-excel' in mime_type or 'xls' in mime_type:
                return 'application/vnd.ms-excel'
            # MS Powerpoint (PPTX, PPT)
            elif 'officedocument.presentationml.presentation' in mime_type or 'pptx' in mime_type:
                return 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            elif 'application/vnd.ms-powerpoint' in mime_type or 'ppt' in mime_type:
                return 'application/vnd.ms-powerpoint'
            # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            elif 'text/plain' in mime_type or 'txt' in mime_type:
                return 'text/plain'
            elif 'text/csv' in mime_type or 'csv' in mime_type:
                return 'text/csv'
            elif 'application/json' in mime_type or 'json' in mime_type:
                return 'application/json'
            elif 'text/markdown' in mime_type or 'md' in mime_type:
                return 'text/markdown'
            elif 'text/html' in mime_type or 'html' in mime_type:
                return 'text/html'
            elif 'application/xml' in mime_type or 'xml' in mime_type:
                return 'application/xml'
            elif 'application/rtf' in mime_type or 'rtf' in mime_type:
                return 'application/rtf'
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            elif 'image/jpeg' in mime_type or 'jpg' in mime_type or 'jpeg' in mime_type:
                return 'image/jpeg'
            elif 'image/png' in mime_type or 'png' in mime_type:
                return 'image/png'
            elif 'image/gif' in mime_type or 'gif' in mime_type:
                return 'image/gif'
            elif 'image/webp' in mime_type or 'webp' in mime_type:
                return 'image/webp'
            elif 'image/svg+xml' in mime_type or 'svg' in mime_type:
                return 'image/svg+xml'
        
        # –ï—Å–ª–∏ filetype –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–ª–∏ —Ç–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º python-magic
        try:
            mime = magic.Magic(mime=True)
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º bytearray –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —É–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –≤ Windows
            with tempfile.NamedTemporaryFile(delete=False) as temp_file:
                temp_file.write(file_bytes)
                temp_file_path = temp_file.name
            
            # –ó–∞—Ç–µ–º –æ–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø –∏–∑ —Ñ–∞–π–ª–∞
            file_type = mime.from_file(temp_file_path)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file_path)
            
            logger.info(f"–¢–∏–ø —Ñ–∞–π–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —á–µ—Ä–µ–∑ magic: {file_type}")
            
            # –ï—Å–ª–∏ —Ç–∏–ø —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if file_type in SUPPORTED_FILE_TYPES:
                return file_type
                
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥—Ä—É–ø–ø —Ç–∏–ø–æ–≤
            if 'text/' in file_type:
                return 'text/plain'
            elif 'image/' in file_type:
                # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JPEG –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç
                if 'jpeg' in file_type or 'jpg' in file_type:
                    return 'image/jpeg'
                elif 'png' in file_type:
                    return 'image/png'
                elif 'gif' in file_type:
                    return 'image/gif'
                elif 'webp' in file_type:
                    return 'image/webp'
                elif 'svg' in file_type:
                    return 'image/svg+xml'
                else:
                    return 'image/jpeg'  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–∏–ø –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            elif 'application/pdf' in file_type:
                return 'application/pdf'
            elif 'wordprocessingml' in file_type or 'docx' in file_type:
                return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
            elif 'msword' in file_type:
                return 'application/msword'
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ —Å magic: {e}")
        
        # –ï—Å–ª–∏ –∏ magic –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ —Ñ–∞–π–ª–∞ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        if file_bytes[:4] == b'%PDF':
            return 'application/pdf'
        elif file_bytes[:2] == b'PK':
            # DOCX –∏ –¥—Ä—É–≥–∏–µ Office-—Ñ–∞–π–ª—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ñ–æ—Ä–º–∞—Ç ZIP (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'PK')
            return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        elif file_bytes[:5] == b'<?xml' or file_bytes[:5] == b'<html' or file_bytes[:9] == b'<!DOCTYPE':
            # XML, HTML –∏ –ø–æ–¥–æ–±–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            return 'text/html'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
            file_bytes.decode('utf-8')
            return 'text/plain'
        except:
            try:
                file_bytes.decode('latin-1')
                return 'text/plain'
            except:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ—Ç–æ–∫,
                # –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –∏ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω
                return 'application/octet-stream'
    except Exception as e:
        # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        logger.error(f"–í—Å–µ –º–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏: {e}")
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞: {e}")

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF
def extract_text_from_pdf(file_bytes):
    try:
        with io.BytesIO(file_bytes) as pdf_file:
            reader = PyPDF2.PdfReader(pdf_file)
            text = ""
            for page_num in range(len(reader.pages)):
                page = reader.pages[page_num]
                text += page.extract_text() + "\n"
            return text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF: {e}")
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞: {str(e)}"

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX
def extract_text_from_docx(file_bytes):
    try:
        with io.BytesIO(file_bytes) as docx_file:
            doc = Document(docx_file)
            text = ""
            for para in doc.paragraphs:
                text += para.text + "\n"
            return text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX: {e}")
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ DOCX —Ñ–∞–π–ª–∞: {str(e)}"

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ TXT
def extract_text_from_txt(file_bytes):
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
        encodings = ['utf-8', 'cp1251', 'latin-1']
        for encoding in encodings:
            try:
                return file_bytes.decode(encoding)
            except UnicodeDecodeError:
                continue
        raise UnicodeDecodeError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ TXT: {e}")
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {str(e)}"

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
def extract_text_from_file(file_bytes, file_type):
    if file_type == 'application/pdf':
        return extract_text_from_pdf(file_bytes)
    elif file_type in ['application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/msword']:
        return extract_text_from_docx(file_bytes)
    elif file_type in ['text/plain', 'text/csv', 'application/json', 'text/markdown', 'text/html', 'application/xml', 'application/rtf']:
        return extract_text_from_txt(file_bytes)
    elif file_type in ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel']:
        return "[–¢–∞–±–ª–∏—Ü–∞ Excel] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º."
    elif file_type in ['application/vnd.openxmlformats-officedocument.presentationml.presentation', 'application/vnd.ms-powerpoint']:
        return "[–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è PowerPoint] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º."
    elif file_type.startswith('image/'):
        return "[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º."
    else:
        return f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_type}"

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è API
def limit_text(text, max_length=15000):
    if len(text) <= max_length:
        return text
    
    return text[:max_length] + f"\n\n... [–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω, –ø—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä. –ü–æ–∫–∞–∑–∞–Ω–æ {max_length} –∏–∑ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤]"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
async def handle_document(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    init_user(user_id)
    init_user_memory(user_id)
    file_id = update.message.document.file_id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –±–µ–∑–ª–∏–º–∏—Ç
    if not users_data[str(user_id)].get("unlimited", False) and users_data[str(user_id)]["credits"] <= 0:
        keyboard = [[InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url=f"https://t.me/{ADMIN_USERNAME}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @" + ADMIN_USERNAME + 
            " –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã –∏–ª–∏ –ø–æ–ª–Ω—ã–π –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∑–∞ –Ω–µ–±–æ–ª—å—à—É—é —Å—É–º–º—É.",
            reply_markup=reply_markup
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_name = update.message.document.file_name or "–¥–æ–∫—É–º–µ–Ω—Ç"
    file_size = update.message.document.file_size
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if file_size > MAX_FILE_SIZE:
        await update.message.reply_text(
            f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - {MAX_FILE_SIZE // (1024 * 1024)} –ú–ë."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    file_key = f"{user_id}_{file_id}"
    if file_key in processing_files:
        await update.message.reply_text("–≠—Ç–æ—Ç —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return
    
    # –û—Ç–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π
    processing_files.add(file_key)
    status_message = None
    
    try:
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_message = await update.message.reply_text(f"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ '{file_name}'...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        try:
            file = await context.bot.get_file(file_id)
            file_bytes = await file.download_as_bytearray()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            await status_message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {str(e)}")
            processing_files.remove(file_key)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_type = None
        try:
            file_type = get_file_type(file_bytes)
            logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_type} –¥–ª—è —Ñ–∞–π–ª–∞ {file_name}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            if file_name:
                ext = os.path.splitext(file_name)[1].lower()
                if ext == '.pdf':
                    file_type = 'application/pdf'
                    logger.info(f"–¢–∏–ø —Ñ–∞–π–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é: {file_type}")
                elif ext in ['.docx', '.doc']:
                    file_type = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
                    logger.info(f"–¢–∏–ø —Ñ–∞–π–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é: {file_type}")
                elif ext in ['.xlsx', '.xls']:
                    file_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                    logger.info(f"–¢–∏–ø —Ñ–∞–π–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é: {file_type}")
                elif ext in ['.pptx', '.ppt']:
                    file_type = 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
                    logger.info(f"–¢–∏–ø —Ñ–∞–π–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é: {file_type}")
                elif ext in ['.txt', '.md', '.csv', '.json', '.xml', '.html', '.htm', '.rtf']:
                    file_type = 'text/plain'
                    logger.info(f"–¢–∏–ø —Ñ–∞–π–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é: {file_type}")
                elif ext in ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg']:
                    if ext in ['.jpg', '.jpeg']:
                        file_type = 'image/jpeg'
                    elif ext == '.png':
                        file_type = 'image/png'
                    elif ext == '.gif':
                        file_type = 'image/gif'
                    elif ext == '.webp':
                        file_type = 'image/webp'
                    elif ext == '.svg':
                        file_type = 'image/svg+xml'
                    logger.info(f"–¢–∏–ø —Ñ–∞–π–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é: {file_type}")
            
            if not file_type:
                await status_message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞.")
                processing_files.remove(file_key)
                return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
        if file_type.startswith('image/'):
            # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            image_base64 = base64.b64encode(file_bytes).decode('utf-8')
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            caption = update.message.caption or "–û–ø–∏—à–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_mime = file_type
            
            message_with_image = {
                "role": "user",
                "content": [
                    {"type": "text", "text": caption},
                    {"type": "image", "source": {"type": "base64", "media_type": image_mime, "data": image_base64}}
                ]
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API)
            text_history = []
            for msg in user_memory[user_id]:
                if isinstance(msg["content"], str):
                    text_history.append({"role": msg["role"], "content": msg["content"]})
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            messages_to_send = text_history + [message_with_image]
            
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await status_message.edit_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{file_name}'...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç
            is_long_content_request = any(keyword in caption.lower() for keyword in 
                                    ["—Ä–µ—Ñ–µ—Ä–∞—Ç", "—ç—Å—Å–µ", "—Å–æ—á–∏–Ω–µ–Ω–∏–µ", "—Å—Ç–∞—Ç—å—è", "–¥–æ–∫–ª–∞–¥", "—Ç–µ–∫—Å—Ç –Ω–∞", 
                                    "–Ω–∞–ø–∏—à–∏ –±–æ–ª—å—à–æ–π", "3000 —Å–ª–æ–≤", "2000 —Å–ª–æ–≤", "–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
                                    "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç", "–ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏", "–ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑"])
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Anthropic
            try:
                response = await query_anthropic(messages_to_send)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API Anthropic: {e}")
                await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Claude: {str(e)}")
                processing_files.remove(file_key)
                return
            
            if "error" in response:
                await status_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {response['error']}")
                processing_files.remove(file_key)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
            if "content" in response and len(response["content"]) > 0:
                assistant_response = response["content"][0]["text"]
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –ø–∞–º—è—Ç—å
                user_memory[user_id].append({"role": "user", "content": caption + " [–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]"})
                user_memory[user_id].append({"role": "assistant", "content": assistant_response})
                
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
                if len(user_memory[user_id]) > MAX_MEMORY_MESSAGES:
                    user_memory[user_id] = user_memory[user_id][-MAX_MEMORY_MESSAGES:]
                
                # –°–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±–µ–∑–ª–∏–º–∏—Ç
                if not users_data[str(user_id)].get("unlimited", False):
                    users_data[str(user_id)]["credits"] -= 1
                    save_users_data()
                
                # –ï—Å–ª–∏ –∫—Ä–µ–¥–∏—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if users_data[str(user_id)]["credits"] == 0:
                    await update.message.reply_text(
                        "‚ö†Ô∏è –≠—Ç–æ –±—ã–ª –≤–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—Ä–µ–¥–∏—Ç! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å "
                        f"@{ADMIN_USERNAME} –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–ª–∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞."
                    )
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await status_message.delete()
                except Exception:
                    pass
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                reply_markup = get_admin_keyboard() if user_id == ADMIN_ID else get_user_keyboard()
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if is_long_content_request or len(assistant_response) > MAX_MESSAGE_LENGTH:
                    await send_long_message(update, assistant_response, reply_markup)
                else:
                    await update.message.reply_text(assistant_response, reply_markup=reply_markup)
            else:
                await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Claude. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            # –î–ª—è –Ω–µ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await status_message.edit_text(f"üîç –ò–∑–≤–ª–µ–∫–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ '{file_name}'...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
            try:
                extracted_text = extract_text_from_file(file_bytes, file_type)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
                await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
                processing_files.remove(file_key)
                return
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
            if not extracted_text or extracted_text.startswith("–ù–µ —É–¥–∞–ª–æ—Å—å"):
                await status_message.edit_text(f"‚ùå {extracted_text}")
                processing_files.remove(file_key)
                return
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
            limited_text = limit_text(extracted_text)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude
            query = update.message.caption or f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç {SUPPORTED_FILE_TYPES.get(file_type, '—Ñ–∞–π–ª')}: {file_name}"
            
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await status_message.edit_text(f"üí≠ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Claude —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–∞–π–ª–∞ ({len(limited_text)} —Å–∏–º–≤–æ–ª–æ–≤)...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
            file_message = f"{query}\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n\n{limited_text}"
            user_memory[user_id].append({"role": "user", "content": file_message})
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö MAX_MEMORY_MESSAGES —Å–æ–æ–±—â–µ–Ω–∏–π
            if len(user_memory[user_id]) > MAX_MEMORY_MESSAGES:
                user_memory[user_id] = user_memory[user_id][-MAX_MEMORY_MESSAGES:]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç
            is_long_content_request = len(limited_text) > 5000 or any(keyword in query.lower() for keyword in 
                                    ["—Ä–µ—Ñ–µ—Ä–∞—Ç", "—ç—Å—Å–µ", "—Å–æ—á–∏–Ω–µ–Ω–∏–µ", "—Å—Ç–∞—Ç—å—è", "–¥–æ–∫–ª–∞–¥", "—Ç–µ–∫—Å—Ç –Ω–∞", 
                                    "–Ω–∞–ø–∏—à–∏ –±–æ–ª—å—à–æ–π", "3000 —Å–ª–æ–≤", "2000 —Å–ª–æ–≤", "–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
                                    "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç", "–ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏", "–ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑"])
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Anthropic
            try:
                response = await query_anthropic(user_memory[user_id])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API Anthropic: {e}")
                await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Claude: {str(e)}")
                processing_files.remove(file_key)
                return
            
            if "error" in response:
                await status_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {response['error']}")
                processing_files.remove(file_key)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
            if "content" in response and len(response["content"]) > 0:
                assistant_response = response["content"][0]["text"]
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –ø–∞–º—è—Ç—å
                user_memory[user_id].append({"role": "assistant", "content": assistant_response})
                
                # –°–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±–µ–∑–ª–∏–º–∏—Ç
                if not users_data[str(user_id)].get("unlimited", False):
                    users_data[str(user_id)]["credits"] -= 1
                    save_users_data()
                
                # –ï—Å–ª–∏ –∫—Ä–µ–¥–∏—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if users_data[str(user_id)]["credits"] == 0:
                    await update.message.reply_text(
                        "‚ö†Ô∏è –≠—Ç–æ –±—ã–ª –≤–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—Ä–µ–¥–∏—Ç! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å "
                        f"@{ADMIN_USERNAME} –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–ª–∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞."
                    )
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await status_message.delete()
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                reply_markup = get_admin_keyboard() if user_id == ADMIN_ID else get_user_keyboard()
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —ç—Ç–æ –±–æ–ª—å—à–æ–π –æ—Ç–≤–µ—Ç
                if is_long_content_request or len(assistant_response) > MAX_MESSAGE_LENGTH:
                    await send_long_message(update, assistant_response, reply_markup)
                else:
                    await update.message.reply_text(assistant_response, reply_markup=reply_markup)
            else:
                await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Claude. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
        if status_message:
            try:
                await status_message.edit_text(error_message)
            except Exception:
                await update.message.reply_text(error_message)
        else:
            await update.message.reply_text(error_message)
    finally:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        if file_key in processing_files:
            processing_files.remove(file_key)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    init_user(user_id)
    init_user_memory(user_id)
    
    user_message = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if user_message in USER_KEYBOARD_COMMANDS or user_message in ADMIN_KEYBOARD_COMMANDS:
        if user_message == "üí∞ –ë–∞–ª–∞–Ω—Å" or user_message == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å":
            await balance_command(update, context)
            return
        elif user_message == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
            await reset_command(update, context)
            return
        elif user_message == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await help_command(update, context)
            return
        
        # –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_id == ADMIN_ID:
            if user_message == "üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
                await list_users_command(update, context)
                return
            elif user_message == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã":
                context.user_data['last_admin_command'] = 'add_credits'
                await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`", parse_mode=ParseMode.MARKDOWN)
                return
            elif user_message == "‚ûñ –°–Ω—è—Ç—å –∫—Ä–µ–¥–∏—Ç—ã":
                context.user_data['last_admin_command'] = 'remove_credits'
                await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`", parse_mode=ParseMode.MARKDOWN)
                return
            elif user_message == "üåü –î–∞—Ç—å –±–µ–∑–ª–∏–º–∏—Ç":
                context.user_data['last_admin_command'] = 'set_unlimited'
                await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`ID`", parse_mode=ParseMode.MARKDOWN)
                return
            elif user_message == "‚≠ê –£–±—Ä–∞—Ç—å –±–µ–∑–ª–∏–º–∏—Ç":
                context.user_data['last_admin_command'] = 'unset_unlimited'
                await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`", parse_mode=ParseMode.MARKDOWN)
                return
        else:
            if user_message in ADMIN_KEYBOARD_COMMANDS and user_message not in USER_KEYBOARD_COMMANDS:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    if user_id == ADMIN_ID:
        parts = user_message.strip().split()
        if len(parts) == 2 and parts[0].isdigit():
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –±–µ–∑–ª–∏–º–∏—Ç–∞
            target_user_id = parts[0]
            try:
                amount = int(parts[1])
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É
                last_command = context.user_data.get('last_admin_command')
                if last_command == "add_credits":
                    await add_credits_command(update, context, target_user_id, amount)
                    context.user_data['last_admin_command'] = None
                    return
                elif last_command == "remove_credits":
                    await remove_credits_command(update, context, target_user_id, amount)
                    context.user_data['last_admin_command'] = None
                    return
                elif last_command == "unset_unlimited":
                    await unset_unlimited_command(update, context, target_user_id, amount)
                    context.user_data['last_admin_command'] = None
                    return
            except ValueError:
                pass
        elif len(parts) == 1 and parts[0].isdigit():
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–µ–∑–ª–∏–º–∏—Ç–∞
            target_user_id = parts[0]
            last_command = context.user_data.get('last_admin_command')
            if last_command == "set_unlimited":
                await set_unlimited_command(update, context, target_user_id)
                context.user_data['last_admin_command'] = None
                return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –±–µ–∑–ª–∏–º–∏—Ç
    if not users_data[str(user_id)].get("unlimited", False) and users_data[str(user_id)]["credits"] <= 0:
        keyboard = [[InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url=f"https://t.me/{ADMIN_USERNAME}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @" + ADMIN_USERNAME + 
            " –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã –∏–ª–∏ –ø–æ–ª–Ω—ã–π –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∑–∞ –Ω–µ–±–æ–ª—å—à—É—é —Å—É–º–º—É.",
            reply_markup=reply_markup
        )
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
    user_memory[user_id].append({"role": "user", "content": user_message})
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö MAX_MEMORY_MESSAGES —Å–æ–æ–±—â–µ–Ω–∏–π
    if len(user_memory[user_id]) > MAX_MEMORY_MESSAGES:
        user_memory[user_id] = user_memory[user_id][-MAX_MEMORY_MESSAGES:]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç (—Ä–µ—Ñ–µ—Ä–∞—Ç, —ç—Å—Å–µ –∏ —Ç.–¥.)
    is_long_content_request = any(keyword in user_message.lower() for keyword in 
                               ["—Ä–µ—Ñ–µ—Ä–∞—Ç", "—ç—Å—Å–µ", "—Å–æ—á–∏–Ω–µ–Ω–∏–µ", "—Å—Ç–∞—Ç—å—è", "–¥–æ–∫–ª–∞–¥", "—Ç–µ–∫—Å—Ç –Ω–∞", 
                                "–Ω–∞–ø–∏—à–∏ –±–æ–ª—å—à–æ–π", "3000 —Å–ª–æ–≤", "2000 —Å–ª–æ–≤", "–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
                                "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç", "–ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏", "–ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑"])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await update.message.chat.send_action("typing")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Anthropic
    response = await query_anthropic(user_memory[user_id])
    
    if "error" in response:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {response['error']}")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
    if "content" in response and len(response["content"]) > 0:
        assistant_response = response["content"][0]["text"]
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –ø–∞–º—è—Ç—å
        user_memory[user_id].append({"role": "assistant", "content": assistant_response})
        
        # –°–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±–µ–∑–ª–∏–º–∏—Ç
        if not users_data[str(user_id)].get("unlimited", False):
            users_data[str(user_id)]["credits"] -= 1
            save_users_data()
            
            # –ï—Å–ª–∏ –∫—Ä–µ–¥–∏—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if users_data[str(user_id)]["credits"] == 0:
                await update.message.reply_text(
                    "‚ö†Ô∏è –≠—Ç–æ –±—ã–ª –≤–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—Ä–µ–¥–∏—Ç! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å "
                    f"@{ADMIN_USERNAME} –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–ª–∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞."
                )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reply_markup = get_admin_keyboard() if user_id == ADMIN_ID else get_user_keyboard()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —ç—Ç–æ –±–æ–ª—å—à–æ–π –æ—Ç–≤–µ—Ç
        if is_long_content_request or len(assistant_response) > MAX_MESSAGE_LENGTH:
            await send_long_message(update, assistant_response, reply_markup)
        else:
            await update.message.reply_text(assistant_response, reply_markup=reply_markup)
    else:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        reply_markup = get_admin_keyboard() if user_id == ADMIN_ID else get_user_keyboard()
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Claude. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async def handle_photo(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    init_user(user_id)
    init_user_memory(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –±–µ–∑–ª–∏–º–∏—Ç
    if not users_data[str(user_id)].get("unlimited", False) and users_data[str(user_id)]["credits"] <= 0:
        keyboard = [[InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url=f"https://t.me/{ADMIN_USERNAME}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @" + ADMIN_USERNAME + 
            " –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã –∏–ª–∏ –ø–æ–ª–Ω—ã–π –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∑–∞ –Ω–µ–±–æ–ª—å—à—É—é —Å—É–º–º—É.",
            reply_markup=reply_markup
        )
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    photo_file = await update.message.photo[-1].get_file()
    photo_bytes = await photo_file.download_as_bytearray()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
    image_base64 = base64.b64encode(photo_bytes).decode('utf-8')
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    caption = update.message.caption or "–û–ø–∏—à–∏—Ç–µ —ç—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç (—Ä–µ—Ñ–µ—Ä–∞—Ç, —ç—Å—Å–µ –∏ —Ç.–¥.)
    is_long_content_request = any(keyword in caption.lower() for keyword in 
                               ["—Ä–µ—Ñ–µ—Ä–∞—Ç", "—ç—Å—Å–µ", "—Å–æ—á–∏–Ω–µ–Ω–∏–µ", "—Å—Ç–∞—Ç—å—è", "–¥–æ–∫–ª–∞–¥", "—Ç–µ–∫—Å—Ç –Ω–∞", 
                                "–Ω–∞–ø–∏—à–∏ –±–æ–ª—å—à–æ–π", "3000 —Å–ª–æ–≤", "2000 —Å–ª–æ–≤", "–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
                                "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç", "–ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏", "–ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑"])
    
    message_with_image = {
        "role": "user",
        "content": [
            {"type": "text", "text": caption},
            {"type": "image", "source": {"type": "base64", "media_type": "image/jpeg", "data": image_base64}}
        ]
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API)
    text_history = []
    for msg in user_memory[user_id]:
        if isinstance(msg["content"], str):
            text_history.append({"role": msg["role"], "content": msg["content"]})
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    messages_to_send = text_history + [message_with_image]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Anthropic
    await update.message.chat.send_action("typing")
    response = await query_anthropic(messages_to_send)
    
    if "error" in response:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {response['error']}")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
    if "content" in response and len(response["content"]) > 0:
        assistant_response = response["content"][0]["text"]
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç) –∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –ø–∞–º—è—Ç—å
        user_memory[user_id].append({"role": "user", "content": caption + " [—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è]"})
        user_memory[user_id].append({"role": "assistant", "content": assistant_response})
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö MAX_MEMORY_MESSAGES —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(user_memory[user_id]) > MAX_MEMORY_MESSAGES:
            user_memory[user_id] = user_memory[user_id][-MAX_MEMORY_MESSAGES:]
        
        # –°–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±–µ–∑–ª–∏–º–∏—Ç
        if not users_data[str(user_id)].get("unlimited", False):
            users_data[str(user_id)]["credits"] -= 1
            save_users_data()
            
            # –ï—Å–ª–∏ –∫—Ä–µ–¥–∏—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if users_data[str(user_id)]["credits"] == 0:
                await update.message.reply_text(
                    "‚ö†Ô∏è –≠—Ç–æ –±—ã–ª –≤–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—Ä–µ–¥–∏—Ç! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å "
                    f"@{ADMIN_USERNAME} –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–ª–∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞."
                )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reply_markup = get_admin_keyboard() if user_id == ADMIN_ID else get_user_keyboard()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —ç—Ç–æ –±–æ–ª—å—à–æ–π –æ—Ç–≤–µ—Ç
        if is_long_content_request or len(assistant_response) > MAX_MESSAGE_LENGTH:
            await send_long_message(update, assistant_response, reply_markup)
        else:
            await update.message.reply_text(assistant_response, reply_markup=reply_markup)
    else:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        reply_markup = get_admin_keyboard() if user_id == ADMIN_ID else get_user_keyboard()
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Claude. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=reply_markup)

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
async def delete_unsupported_message(update: Update, context: CallbackContext):
    await update.message.delete()

def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    load_users_data()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ post_init
    builder = Application.builder()
    builder.token(TELEGRAM_BOT_TOKEN)
    # –û—Ç–∫–ª—é—á–∞–µ–º job_queue –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ weak reference
    builder.job_queue(None)
    application = builder.build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ñ–∞–π–ª–æ–≤)
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.VOICE | filters.VIDEO | filters.AUDIO | filters.VIDEO_NOTE, 
        delete_unsupported_message
    ))
    
    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π handle_message
    application.add_handler(MessageHandler(
        ~filters.TEXT & ~filters.PHOTO & ~filters.COMMAND & ~filters.Document.ALL & 
        ~filters.VOICE & ~filters.VIDEO & ~filters.AUDIO & ~filters.VIDEO_NOTE, 
        handle_message
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±-—Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–∞—Ö
    PORT = int(os.environ.get('PORT', '8443'))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if os.environ.get('USE_WEBHOOK', 'False').lower() == 'true':
        # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ —Å –≤–µ–±-—Ö—É–∫–æ–º
        APP_URL = os.environ.get('APP_URL', '')
        if APP_URL:
            application.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                url_path=TELEGRAM_BOT_TOKEN,
                webhook_url=f"{APP_URL}/{TELEGRAM_BOT_TOKEN}"
            )
            print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ –ø–æ—Ä—Ç—É {PORT}!")
        else:
            print("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω APP_URL –¥–ª—è webhook —Ä–µ–∂–∏–º–∞")
            application.run_polling()
    else:
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å polling
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        application.run_polling()

if __name__ == "__main__":
    main() 